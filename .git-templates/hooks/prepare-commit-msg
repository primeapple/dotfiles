#!/bin/bash
# This script is used by git to generate a commit message template based on the current branch name.
# Supported parts are conventional commit types (`type`) and ticket numbers (`123` or `GH-123`)
# The branch name will result in a commit message template like this:
#  - type-some-description -> type:
#  - type-GH-123-description -> type: GH-123
#  - type-123-description -> type: #123
#  - 123-description -> #123
#  - 123-GH-124-description -> #123 GH-124
#  - some-description ->

COMMIT_MSG_FILE="$1"

# Abort during merges/rebases
LAST_EXIT_CODE=$?
if [ $LAST_EXIT_CODE -ne 0 ]; then
    exit 0
fi

# Abort if first line of commit message is not empty (merges, amend, etc.)
if [ -n "$(head -n 1 "$COMMIT_MSG_FILE")" ]; then
    exit 0
fi

# Abort on excluded branches
EXCLUDED_BRANCHES=("master" "main" "dev")
CURRENT_BRANCH=$(git symbolic-ref --quiet --short HEAD)
if [[ ${EXCLUDED_BRANCHES[*]} =~ $CURRENT_BRANCH ]]; then
    exit 0
fi

# Build array of conventional commit types
CONVENTIONAL_COMMIT_TYPES=("build" "chore" "ci" "docs" "feat" "fix" "perf" "refactor" "revert" "style" "test")
for type in "${CONVENTIONAL_COMMIT_TYPES[@]}"; do
    CONVENTIONAL_COMMIT_TYPES+=("$type!")
done

# Split branchname by "-" char and store in PARTS
IFS='-' read -ra PARTS <<< "$CURRENT_BRANCH"

MESSAGE=""

# Checking if it includes conventional commit (scope not supported)
if [[ ${CONVENTIONAL_COMMIT_TYPES[*]} =~ ${PARTS[0]} ]]; then
    MESSAGE="${PARTS[0]}: "
    PARTS=("${PARTS[@]:1}")
fi

# Checking and constructing the message if it includes ticket number
while [ ${#PARTS[@]} -ge 2 ]; do
    if [[ ${PARTS[0]} =~ ^[A-Z0-9]+$ ]] && [[ ${PARTS[1]} =~ ^[0-9]+$ ]]; then
        MESSAGE+="${PARTS[0]}-${PARTS[1]} "
        PARTS=("${PARTS[@]:2}")
    elif [[ ${PARTS[0]} =~ ^[0-9]+$ ]]; then
        MESSAGE+="#${PARTS[0]} "
        PARTS=("${PARTS[@]:1}")
    else
        break
    fi
done

# Write MESSAGE to the commit message file
sed -i "1s/.*/$MESSAGE/" "$COMMIT_MSG_FILE"
