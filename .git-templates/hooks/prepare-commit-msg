#!/usr/bin/env fish
# This script is used by git to generate a commit message template based on the current branch name
# Supported parts are conventional commit types (`type`) and ticket numbers (`123` or `GH-123`)
# The branch name will result in a commit message template like this:
#  - type-some-description -> type:
#  - type-GH-123-description -> type: GH-123
#  - type-123-description -> type: #123
#  - 123-description -> #123
#  - 123-GH-124-description -> #123 GH-124
#  - some-description -> 


set -l COMMIT_MSG_FILE $argv[1]

set -l EXCLUDE_BRANCHES master main dev
set -l BRANCH (git symbolic-ref --quiet --short HEAD)

# abort during merges/rebases and on excluded branches
if test $status -ne 0 || contains $BRANCH $EXCLUDE_BRANCHES
    exit 0
end

# abort if first line of commit message is not empty (merges, amend, etc.)
if test -n (head -n 1 $COMMIT_MSG_FILE)
    exit 0
end

set -l PARTS (string split '-' $BRANCH)

# building list of conventional commit types
set CONVENTIONAL_COMMIT_TYPES build chore ci docs feat fix perf refactor revert style test
for TYPE in $CONVENTIONAL_COMMIT_TYPES
    set --append CONVENTIONAL_COMMIT_TYPES "$TYPE!"
end

# checking if it includes conventional commit (scope not supported)
if contains $PARTS[1] $CONVENTIONAL_COMMIT_TYPES
    set --append MESSAGE "$PARTS[1]:"
    set --erase PARTS[1]
end

# checking if it includes ticket number
while test (count $PARTS) -ge 2
    echo $PARTS
    if string match -q -r '^[A-Z]+$' $PARTS[1] && string match -q -r '^[0-9]+$' $PARTS[2]
        set --append MESSAGE "$PARTS[1]-$PARTS[2]"
        set --erase PARTS[1 2]
    else if string match -q -r '^[0-9]+$' $PARTS[1]
        set --append MESSAGE "#$PARTS[1]"
        set --erase PARTS[1]
    else
        break
    end
end

sed -i "1s/.*/$MESSAGE/" $COMMIT_MSG_FILE
